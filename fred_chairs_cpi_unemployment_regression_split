#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Treillis regression plots of Unemployment vs CPI for each Fed Chair.
All panels share the same x‑/y‑axis limits so you can compare slopes directly.
"""

# ------------------------------------------------------------------
#  Imports
# ------------------------------------------------------------------
import requests, pandas as pd, numpy as np
from datetime import datetime

from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

# ------------------------------------------------------------------
#  API key – put your own key in a file called fred_key.py
# ------------------------------------------------------------------
try:
    from fred_key import fred_key          # <-- adjust if you named it differently
except Exception:  # pragma: no cover
    raise RuntimeError(
        "Could not load your FRED key.\n"
        "Create a file called `fred_key.py` with:\n\n"
        "    fred_key = \"YOUR_ACTUAL_KEY\"\n"
        "or set the variable directly below."
    )

# ------------------------------------------------------------------
#  Helper: generic request wrapper
# ------------------------------------------------------------------
BASE_URL = "https://api.stlouisfed.org/fred/"

def fred_get(endpoint: str, params: dict) -> requests.Response:
    if "api_key" not in params:
        params["api_key"] = fred_key
    resp = requests.get(BASE_URL + endpoint, params=params)
    resp.raise_for_status()
    return resp

# ------------------------------------------------------------------
#  Pull CPI (YoY%) & Unemployment (linear %) for the period you care about
# ------------------------------------------------------------------
start_date = "1990-01-01"
end_date   = datetime.today().strftime("%Y-%m-%d")

def pull_series(series_id, units, freq="m"):
    params = {
        "series_id": series_id,
        "observation_start": start_date,
        "observation_end": end_date,
        "frequency": freq,
        "units": units,
        "file_type": "json",
    }
    resp   = fred_get("series/observations", params)
    df     = pd.DataFrame(resp.json()["observations"])
    df["date"] = pd.to_datetime(df["date"])
    df.set_index("date", inplace=True)
    df["value"] = df["value"].astype(float)
    return df

cpi_df  = pull_series("CPIAUCSL", "pc1")   # percent change YoY
unemp_df= pull_series("UNRATE",   "lin")   # linear %


# ------------------------------------------------------------------
#  Merge into a single DataFrame
# ------------------------------------------------------------------
merged = pd.merge(cpi_df, unemp_df,
                 left_index=True, right_index=True,
                 suffixes=("_cpi","_unemp")).dropna()

merged.rename(columns={"value_cpi":"CPI YoY %", "value_unemp":"Unemployment %"},
              inplace=True)

# ------------------------------------------------------------------
#  Load the Fed Chair tenure table
# ------------------------------------------------------------------
# Replace this with your own source if needed.
# For example, read from a CSV or SQL Server:
# chair_df = pd.read_sql('SELECT * FROM fred.LKP_FED_CHAIRS', con=cnxn)
chair_df = pd.DataFrame({
    'startd_date': ['1914-08-10','1916-08-10','1923-05-01','1927-10-04',
                    '1930-09-16','1933-05-19','1934-11-15','1948-04-15',
                    '1951-04-02','1970-02-01','1978-03-08','1979-08-06',
                    '1987-08-11','2006-02-01','2014-02-03','2018-02-05'],
    'end_date':    ['1916-08-09','1922-08-09','1927-09-15','1930-08-31',
                    '1933-05-10','1934-08-15','1948-01-31','1951-03-31',
                    '1970-01-31','1978-01-31','1979-08-06','1987-08-11',
                    '2006-01-31','2014-01-31','2018-02-03',None],
    'name': ['Charles S. Hamlin','W.P.G. Harding','Daniel R. Crissinger','Roy A. Young',
             'Eugene Meyer','Eugene R. Black','Marriner S. Eccles','Thomas B. McCabe',
             'William McChesney Martin, Jr.','Arthur F. Burns','G. William Miller',
             'Paul A. Volcker','Alan Greenspan','Ben S. Bernanke',
             'Janet L. Yellen','Jerome H. Powell']
})
chair_df['startd_date'] = pd.to_datetime(chair_df['startd_date'])
chair_df['end_date']   = pd.to_datetime(chair_df['end_date'])

# ------------------------------------------------------------------
#  Prepare figure: one panel per chair that has data
# ------------------------------------------------------------------
n_chairs = chair_df.shape[0]
fig, axes = plt.subplots(nrows=n_chairs, ncols=1,
                         figsize=(8, 3*n_chairs),
                         constrained_layout=True)

if n_chairs == 1:
    axes = [axes]          # make it iterable

# To keep the same x/y limits for all panels we first determine them
x_min, x_max = merged["CPI YoY %"].min(), merged["CPI YoY %"].max()
y_min, y_max = merged["Unemployment %"].min(), merged["Unemployment %"].max()

# ------------------------------------------------------------------
#  Plot loop – updated to include a continuous colour scale and a vertical legend
# ------------------------------------------------------------------
for ax, (idx, row) in zip(axes, chair_df.iterrows()):
    # Filter observations that fall inside the chair's tenure
    mask = (merged.index >= row['startd_date']) & \
           ((merged.index <= row['end_date']) | pd.isna(row['end_date']))
    data = merged.loc[mask]

    if data.empty:
        ax.set_visible(False)
        continue

    # Fit a regression just for this chair
    X = data[["CPI YoY %"]].values.reshape(-1, 1)
    y = data["Unemployment %"].values
    reg = LinearRegression().fit(X, y)

    # ---- Scatter with continuous colour scale -----------------
    # Map dates to a float that matplotlib can normalise
    date_nums = data.index.map(pd.Timestamp.toordinal).astype(float)

    norm = plt.Normalize(vmin=date_nums.min(), vmax=date_nums.max())
    cmap = plt.cm.viridis   # you can pick any sequential cmap you like

    scatter = ax.scatter(
        data["CPI YoY %"],
        data["Unemployment %"],
        c=date_nums,
        cmap=cmap,
        norm=norm,
        alpha=0.7,
        edgecolor='k',
        s=20
    )

    # ----- Fit line -------------------------------------------------
    x_vals = np.linspace(x_min, x_max, 200)
    y_pred = reg.predict(x_vals.reshape(-1, 1))
    ax.plot(x_vals, y_pred, color="darkorange", linewidth=2,
            label=f"Fit: a={reg.intercept_:.2f} b={reg.coef_[0]:.3f}")

    # ----- Uniform axes ------------------------------------------------
    ax.set_xlim(x_min, x_max)
    ax.set_ylim(y_min, y_max)

    # ----- Title & labels ---------------------------------------------
    title = f"{row['name']}  ({row['startd_date'].date()} – " \
            f"{'present' if pd.isna(row['end_date']) else row['end_date'].date()})"
    ax.set_title(title, fontsize=10)
    ax.set_xlabel("CPI YoY %")
    ax.set_ylabel("Unemployment %")
    ax.grid(alpha=0.3)
    ax.legend(loc='upper left', frameon=False)

    # ----- Colour‑bar legend ------------------------------------------
    mappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
    mappable.set_array([])  # required for matplotlib <3.5

    cbar = fig.colorbar(mappable, ax=ax,
                        orientation='vertical',
                        pad=0.02,
                        shrink=0.8)

    cbar.ax.set_ylabel('Date', rotation=-90, labelpad=15)

    # Format the colour‑bar ticks as "MMM-YYYY"
    def fmt_date(val, pos):
        return pd.to_datetime(pd.Timestamp.fromordinal(int(val))).strftime("%b-%Y")
    cbar.formatter = mtick.FuncFormatter(fmt_date)
    cbar.update_ticks()

    # ---- Reverse legend order so earliest (light) is at the top -------------
    cbar.ax.invert_yaxis()          # <-- add this line
